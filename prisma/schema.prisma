generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model book {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title          String       @db.VarChar(255)
  author         String       @db.VarChar(255)
  publisher_id   String       @db.Uuid
  published_date DateTime     @db.Date
  isbn           String       @db.VarChar(255)
  genre          String       @db.VarChar(255)
  created_at     DateTime     @default(now()) @db.Timestamp(6)
  updated_at     DateTime     @default(now()) @db.Timestamp(6)
  publisher      publisher    @relation(fields: [publisher_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  discussion     discussion[]
  review         review[]
}

model collection {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String   @db.VarChar(255)
  user_id    String   @db.Uuid
  is_public  Boolean  @default(true)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model discussion {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  topic      String   @db.VarChar(255)
  user_id    String   @db.Uuid
  book_id    String   @db.Uuid
  is_closed  Boolean  @default(false)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  book       book     @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model publisher {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  book        book[]
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model review {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content    String
  rating     Int
  user_id    String   @db.Uuid
  book_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  book       book     @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String       @unique @db.VarChar(255)
  firstName   String?      @db.VarChar(255)
  lastName    String?      @db.VarChar(255)
  roq_user_id String       @db.VarChar(255)
  tenant_id   String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  collection  collection[]
  discussion  discussion[]
  publisher   publisher[]
  review      review[]
}
